package krcho.gui;

import java.awt.Graphics;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import javax.swing.JOptionPane;
import krcho.freecell.FreeCell;

/**
 * Main game pane, input and output control. 
 *
 * @author Jozef Krcho
 */
public class JPaneFreeCell extends javax.swing.JPanel {

    private FreeCell game;
    private final MyMouseMotion motion;

    /**
     * Creates new form JPanelFreeCell
     */
    public JPaneFreeCell() {
        initComponents();
        game = new FreeCell();
        motion = new MyMouseMotion();

        this.addMouseListener(motion);
        this.addMouseMotionListener(motion);

    }

    /**
     * Create and paint new game.
     */
    public void newGame() {
        game.newGame();
        repaint();
    }

    public void newEasyGame() {
        game.newEasyGame();
        repaint();
    }

    /**
     * Undo move. 
     */
    public void undo() {
        game.undo();
        repaint();
    }

    /**
     * Change card type.
     *
     * @param path path to card image
     */
    public void setCardType(String path) {
        game.setCardType(path);
        repaint();
    }

    /**
     * Save game
     */
    public void saveGame() {
        try {
            FileOutputStream fileOut = new FileOutputStream("/save1.ser");
            ObjectOutputStream ObjOut = new ObjectOutputStream(fileOut);
            ObjOut.writeObject(game);
            ObjOut.close();
            fileOut.close();
        } catch (IOException i) {
        }
    }

    /**
     * Load game if exist.
     */
    public void loadGame() {
        FreeCell Loaded = null;
        try {
            FileInputStream fileIn = new FileInputStream("/save1.ser");
            ObjectInputStream in = new ObjectInputStream(fileIn);
            Loaded = (FreeCell) in.readObject();
            in.close();
            fileIn.close();
        } catch (IOException i) {
            i.printStackTrace();
            return;
        } catch (ClassNotFoundException c) {
            c.printStackTrace();
            return;
        }
        game = Loaded;
        game.setCardType("/obrazky/karty1.png");
        this.repaint();
    }

    private void mouseHoldAndDrag(MouseEvent e) {
        repaint();
        game.grabCard(e.getX(), e.getY());
    }

    private void mouseRealese(MouseEvent e) {
        repaint();
        game.releaseCard(e.getX(), e.getY());
        if (game.isOver()) {
            int res = JOptionPane.showConfirmDialog(null, "Gratulujem vyhrali ste ! \n\nChcete rozložiť novú hru ?", "Víťazstvo !!!", JOptionPane.YES_NO_OPTION);
            if (res == 0) {
                game.newGame();
                repaint();
            } else {
                System.exit(0);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    @Override
    protected void paintComponent(Graphics g) {
        super.paintComponent(g);
        if (game != null) {
            game.toDraw(g);
        }
    }

    /**
     * Inner class, listener for mouse inputs in this pane.
     */
    private class MyMouseMotion implements MouseMotionListener, MouseListener {

        @Override
        public void mouseDragged(MouseEvent e) {
            mouseHoldAndDrag(e);
        }

        @Override
        public void mouseMoved(MouseEvent e) {
        }

        @Override
        public void mouseClicked(MouseEvent e) {
        }

        @Override
        public void mousePressed(MouseEvent e) {
        }

        @Override
        public void mouseReleased(MouseEvent e) {
            mouseRealese(e);
        }

        @Override
        public void mouseEntered(MouseEvent e) {
        }

        @Override
        public void mouseExited(MouseEvent e) {
        }

    }
}
